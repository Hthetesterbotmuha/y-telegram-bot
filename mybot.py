import asyncio
import json
import time
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command

TOKEN = "7854334560:AAF45884N8FkM5amESBMvvATp9pJczi450Y"
ADMIN_ID = 7506897346  # ID-–∏ –∞–¥–º–∏–Ω–∏ –±–æ—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥

bot = Bot(token=TOKEN)
dp = Dispatcher()

–ú–∞“ì–æ–∑–∞–∏ —Ñ–∞–π–ª“≥–æ –±–∞—Ä–æ–∏ –Ω–∏–≥–æ“≥–¥–æ—Ä”£

file_store = {}
download_limit = {}  # –ú–∞“ì–æ–∑–∞–∏ –º–∞“≥–¥—É–¥–∏—è—Ç–∏ –∑–µ—Ä–∫–∞—à”£ (ID-–∏ —Ñ–∞–π–ª ‚Üí —à—É–º–æ—Ä–∞)

–ó–∞—Ö–∏—Ä–∞ –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∞–π–ª“≥–æ –¥–∞—Ä —Ñ–∞–π–ª–∏ "files.json"

def save_files():
with open("files.json", "w") as f:
json.dump({"files": file_store, "limits": download_limit}, f)

–ë–∞—Ä“õ–∞—Ä–æ—Ä –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∞–π–ª“≥–æ “≥–∞–Ω–≥–æ–º–∏ –æ“ì–æ–∑

def load_files():
global file_store, download_limit
try:
with open("files.json", "r") as f:
data = json.load(f)
file_store = data.get("files", {})
download_limit = data.get("limits", {})
except FileNotFoundError:
file_store = {}
download_limit = {}

load_files()

“≤–æ–ª–∞—Ç“≥–æ–∏ –∫–æ—Ä–±–∞—Ä–æ–Ω—Ä–æ –Ω–∏–≥–æ“≥ –º–µ–¥–æ—Ä–∞–¥ (–º–∞—Å–∞–ª–∞–Ω, –∏–Ω—Ç–∏–∑–æ—Ä–∏–∏ –º–∞“≥–¥—É–¥–∏—è—Ç–∏ –∑–µ—Ä–∫–∞—à”£)

user_states = {}

async def check_subscription(user_id):
current_time = time.time()

# –ü–æ–∫ –∫–∞—Ä–¥–∞–Ω–∏ –∫–∞–Ω–∞–ª“≥–æ–µ, –∫–∏ –º”Ø“≥–ª–∞—Ç–∞—à–æ–Ω –±–∞ –æ—Ö–∏—Ä —Ä–∞—Å–∏–¥–∞–∞—Å—Ç  
for channel, expiration in list(CHANNELS.items()):  
    if current_time > expiration:  
        del CHANNELS[channel]  
        del channel_expiration[channel]  

# –°–∞–Ω“∑–∏—à –∫–∞—Ä–¥–∞–Ω–∏ –æ–±—É–Ω–∞–∏ –∫–æ—Ä–±–∞—Ä  
for channel in CHANNELS:  
    try:  
        member = await bot.get_chat_member(channel, user_id)  
        if member.status not in ["member", "administrator", "creator"]:  
            return False  # –ê–≥–∞—Ä –∫–æ—Ä–±–∞—Ä –æ–±—É–Ω–∞ –Ω–∞—à—É–¥–∞ –±–æ—à–∞–¥  
    except:  
        # –ê–≥–∞—Ä –∫–∞–Ω–∞–ª —ë—Ñ—Ç –Ω–∞—à–∞–≤–∞–¥ —ë —Ö–∞—Ç–æ–≥”£ –ø–∞–π–¥–æ —à–∞–≤–∞–¥  
        continue  

return True  # –ê–≥–∞—Ä –∫–æ—Ä–±–∞—Ä –±–∞ “≥–∞–º–∞–∏ –∫–∞–Ω–∞–ª“≥–æ –æ–±—É–Ω–∞ –±–æ—à–∞–¥

–ó–∞—Ö–∏—Ä–∞–∏ —Ä–µ–∫–ª–∞–º–∞ –≤–∞ –º”Ø“≥–ª–∞—Ç–∏ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω

advertisement_text = "üì¢ –ë–∞ –∫–∞–Ω–∞–ª–∏ –º–æ –æ–±—É–Ω–∞ —à–∞–≤–µ–¥ –≤–∞ —Ñ–∞–π–ª“≥–æ–∏ –±–µ—à—Ç–∞—Ä –≥–∏—Ä–µ–¥! üî• –ö–ª–∏–∫ –∫—É–Ω–µ–¥"
advertisement_photo = None  # –ê–∫—Å –±–∞—Ä–æ–∏ —Ä–µ–∫–ª–∞–º–∞
advertisement_end_time = 0  # –í–∞“õ—Ç–∏ –∞–Ω“∑–æ–º–∏ —Ä–µ–∫–ª–∞–º–∞
advertisement_active = False  # –û—ë —Ä–µ–∫–ª–∞–º–∞ —Ñ–∞—ä–æ–ª –∞—Å—Ç?

–ö–∞–Ω–∞–ª“≥–æ–∏ –æ–±—É–Ω–∞—à–∞–≤”£ –≤–∞ –º”Ø“≥–ª–∞—Ç–∏ –æ–Ω“≥–æ

CHANNELS = {}  # –∫–∞–Ω–∞–ª -> –º”Ø“≥–ª–∞—Ç–∏ –∞–Ω“∑–æ–º
channel_expiration = {}  # –∫–∞–Ω–∞–ª -> –º”Ø“≥–ª–∞—Ç–∏ –∞–Ω“∑–æ–º

–¢—É–≥–º–∞–∏ –æ–±—É–Ω–∞—à–∞–≤”£

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
subscribe_keyboard = InlineKeyboardMarkup(inline_keyboard=[
[InlineKeyboardButton(text="‚úÖ –ú–∞–Ω –æ–±—É–Ω–∞ —à—É–¥–∞–º", callback_data="check_subscription")]
])

–¢—É–≥–º–∞“≥–æ –±–∞—Ä–æ–∏ –∞–¥–º–∏–Ω

admin_keyboard = ReplyKeyboardMarkup(
keyboard=[
[KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
[KeyboardButton(text="üì¢ –†–µ–∫–ª–∞–º–∞")],
[KeyboardButton(text="üì∫ –ö–∞–Ω–∞–ª“≥–æ")]
],
resize_keyboard=True
)

@dp.message(Command("start"))
async def welcome(message: Message):
global advertisement_active

# Check if there's a file ID argument  
args = message.text.split()  
if len(args) > 1:  
    file_id = args[1]  
    if file_id in file_store:  
        # üìå –°–∞–Ω“∑–∏—à–∏ –æ–±—É–Ω–∞–∏ –∫–æ—Ä–±–∞—Ä  
        if CHANNELS and not await check_subscription(message.from_user.id):  
            channels_list = "\n".join([f"üì∫ {channel}" for channel in CHANNELS.keys()])  
            await message.answer(  
                f"‚ùó –ë–∞—Ä–æ–∏ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ —Ñ–∞–π–ª, —à—É–º–æ –±–æ—è–¥ –±–∞ –∫–∞–Ω–∞–ª“≥–æ–∏ —à–∞—Ä–∏–∫–æ–Ω –æ–±—É–Ω–∞ —à–∞–≤–µ–¥ ‚¨áÔ∏è\n\n{channels_list}\n\n"  
                "‚úÖ –ü–∞—Å –∞–∑ –æ–±—É–Ω–∞ —à—É–¥–∞–Ω, —Ç—É–≥–º–∞–∏ '–ú–∞–Ω –æ–±—É–Ω–∞ —à—É–¥–∞–º'-—Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥!",   
                reply_markup=subscribe_keyboard  
            )  
            return  
          
        if download_limit.get(file_id, 1) > 0:  
            # Send the requested file  
            try:  
                await message.answer_document(file_store[file_id])  
                download_limit[file_id] -= 1  
                save_files()  
                  
                # üìå –ë–æ—Ç —Ä–µ–∫–ª–∞–º–∞—Ä–æ **—Ç–∞–Ω“≥–æ –¥–∞—Ä –º”Ø“≥–ª–∞—Ç–∏ –º—É“õ–∞—Ä—Ä–∞—Ä—à—É–¥–∞** –º–µ—Ñ–∏—Ä–∏—Å—Ç–∞–¥  
                if advertisement_active and time.time() < advertisement_end_time:  
                    if advertisement_photo:  
                        await message.answer_photo(advertisement_photo, caption=advertisement_text, parse_mode="Markdown")  
                    else:  
                        await message.answer(advertisement_text, parse_mode="Markdown")  
                else:  
                    advertisement_active = False  # –ë–æ—Ç —Ä–µ–∫–ª–∞–º–∞—Ä–æ –¥–∏–≥–∞—Ä –Ω–∞–º–µ—Ñ–∏—Ä–∏—Å—Ç–∞–¥  
                return  
            except:  
                await message.answer("‚ùå –§–∞–π–ª —ë—Ñ—Ç –Ω–∞—à—É–¥!")  
                return  
        else:  
            await message.answer("üö´ –ú”Ø“≥–ª–∞—Ç–∏ –∑–µ—Ä–∫–∞—à–∏–∏ –∏–Ω —Ñ–∞–π–ª –±–∞ –æ—Ö–∏—Ä —Ä–∞—Å–∏–¥!")  
            return  

# Send welcome message with admin keyboard if admin  
if message.from_user.id == ADMIN_ID:  
    await message.answer("üëãüèª –•—É—à –æ–º–∞–¥–µ–¥, –∞–¥–º–∏–Ω!", reply_markup=admin_keyboard)  
else:  
    await message.answer(  
        "üëãüèª **–•—É—à –æ–º–∞–¥–µ–¥!**\n\n"  
        "üíæ **–ë–æ —ë—Ä–∏–∏ –∏–Ω –±–æ—Ç, —à—É–º–æ –º–µ—Ç–∞–≤–æ–Ω–µ–¥ —Ñ–∞–π–ª“≥–æ–∏ –≥—É–Ω–æ–≥—É–Ω—Ä–æ –±–æ –æ—Å–æ–Ω”£ –¥–∞—Ä—ë—Ñ—Ç –∫—É–Ω–µ–¥.**\n\n"  
        "‚ö° **–ò–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥ —Ç—É–≥–º–∞—Ä–æ, –∫–∏ –±–∞ —à—É–º–æ –ª–æ–∑–∏–º –∞—Å—Ç –≤–∞ –æ“ì–æ–∑ –∫—É–Ω–µ–¥!**",  
        parse_mode="Markdown"  
    )

@dp.message(lambda message: message.content_type in ["document", "photo", "video", "audio"])
async def save_file(message: Message):
if message.from_user.id == ADMIN_ID:
file_id = None
if message.document:
file_id = message.document.file_id
elif message.photo:
file_id = message.photo[-1].file_id
elif message.video:
file_id = message.video.file_id
elif message.audio:
file_id = message.audio.file_id

if file_id:  
        # –ù–∏–≥–æ“≥ –¥–æ—à—Ç–∞–Ω–∏ file_id –¥–∞—Ä “≥–æ–ª–∞—Ç–∏ –∫–æ—Ä–±–∞—Ä  
        user_states[message.from_user.id] = {"file_id": file_id, "waiting_for_limit": True}  
        await message.answer("üî¢ –õ—É—Ç—Ñ–∞–Ω —à—É–º–æ—Ä–∞–∏ –∏“∑–æ–∑–∞—Ç–¥–æ–¥–∞–∏ –∑–µ—Ä–∫–∞—à–∏—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (20, 40, 50, 100...)")  
    else:  
        await message.answer("‚ùå –§–∞–π–ª –Ω–æ–¥—É—Ä—É—Å—Ç –∞—Å—Ç.")  
else:  
    await message.answer("üö´ –¢–∞–Ω“≥–æ –∞–¥–º–∏–Ω –º–µ—Ç–∞–≤–æ–Ω–∞–¥ —Ñ–∞–π–ª –∏—Ä—Å–æ–ª –∫—É–Ω–∞–¥!")

@dp.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id].get("waiting_for_limit"))
async def set_download_limit(message: Message):
if not message.text.isdigit():
await message.answer("‚ùå –õ—É—Ç—Ñ–∞–Ω —Ä–∞“õ–∞–º–∏ –¥—É—Ä—É—Å—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥!")
return

user_id = message.from_user.id  
if user_id in user_states and user_states[user_id]["waiting_for_limit"]:  
    file_id = user_states[user_id]["file_id"]  
    unique_id = str(len(file_store) + 1)  
    file_store[unique_id] = file_id  
    download_limit[unique_id] = int(message.text)  
    save_files()  
      
    # üìå –ë–æ—Ç **–ø–∞—Å –∞–∑ –≤–æ—Ä–∏–¥ –∫–∞—Ä–¥–∞–Ω–∏ —à—É–º–æ—Ä–∞–∏ –∑–µ—Ä–∫–∞—à”£** —Å—Å—ã–ª–∫–∞ –º–µ–¥–∏“≥–∞–¥!  
    bot_info = await bot.get_me()  
    link = f"https://t.me/{bot_info.username}?start={unique_id}"  
    await message.answer(f"‚úÖ –§–∞–π–ª —Å–∞–±—Ç —à—É–¥! –°—Å—ã–ª–∫–∞–∏ –∑–µ—Ä–∫–∞—à”£: {link}")  
      
    # Clear user state  
    user_states.pop(user_id)  
else:  
    await message.answer("‚ùå –•–∞—Ç–æ–≥”£. –õ—É—Ç—Ñ–∞–Ω, —Ñ–∞–π–ª—Ä–æ –¥—É–±–æ—Ä–∞ –±–æ—Ä –∫—É–Ω–µ–¥.")

@dp.message(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: Message):
if message.from_user.id == ADMIN_ID:
await message.answer(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞–∏ –±–æ—Ç:\n\n"
f"üë• –ö–æ—Ä–±–∞—Ä–æ–Ω: {len(file_store)}\n"
f"üìÇ –§–∞–π–ª“≥–æ–∏ –±–æ—Ä–≥—É–∑–æ—Ä–∏—à—É–¥–∞: {len(file_store)}",
parse_mode="Markdown")
else:
await message.answer("üö´ –ò–Ω —Ñ—É–Ω–∫—Å–∏—è —Ç–∞–Ω“≥–æ –±–∞—Ä–æ–∏ –∞–¥–º–∏–Ω –∞—Å—Ç!")

@dp.message(lambda message: message.text == "üì¢ –†–µ–∫–ª–∞–º–∞")
async def set_advertisement(message: Message):
if message.from_user.id == ADMIN_ID:
user_states[message.from_user.id] = {"waiting_for_ad_text": True}
await message.answer("‚úçÔ∏è –õ—É—Ç—Ñ–∞–Ω –º–∞—Ç–Ω–∏ –Ω–∞–≤–∏ —Ä–µ–∫–ª–∞–º–∞—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:")
else:
await message.answer("üö´ –ò–Ω —Ñ—É–Ω–∫—Å–∏—è —Ç–∞–Ω“≥–æ –±–∞—Ä–æ–∏ –∞–¥–º–∏–Ω –∞—Å—Ç!")

@dp.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id].get("waiting_for_ad_text"))
async def save_advertisement(message: Message):
global advertisement_text
user_id = message.from_user.id
advertisement_text = message.text
user_states[user_id] = {"waiting_for_ad_photo": True}
await message.answer("üì∏ “≤–æ–ª–æ –∞–∫—Å –±–∞—Ä–æ–∏ —Ä–µ–∫–ª–∞–º–∞ —Ñ–∏—Ä–∏—Å—Ç–µ–¥ (—ë 'skip' –Ω–∞–≤–∏—Å–µ–¥ –∞–≥–∞—Ä –∞–∫—Å –Ω–∞–º–µ—Ö–æ“≥–µ–¥):")

@dp.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id].get("waiting_for_ad_photo"))
async def save_advertisement_photo(message: Message):
global advertisement_photo
user_id = message.from_user.id

if message.photo:  
    advertisement_photo = message.photo[-1].file_id  
    user_states[user_id] = {"waiting_for_ad_duration": True}  
    await message.answer("‚úÖ –ê–∫—Å –∑–∞—Ö–∏—Ä–∞ —à—É–¥! ‚è≥ “≤–æ–ª–æ –≤–∞“õ—Ç–∏ –∏–Ω—Ç–∏–∑–æ—Ä–∏—Ä–æ (–¥–∞“õ–∏“õ–∞) –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥: 10, 20, 30, 60...")  
elif message.text and message.text.lower() == "skip":  
    advertisement_photo = None  
    user_states[user_id] = {"waiting_for_ad_duration": True}  
    await message.answer("‚è≥ –õ—É—Ç—Ñ–∞–Ω –≤–∞“õ—Ç–∏ –∏–Ω—Ç–∏–∑–æ—Ä–∏—Ä–æ (–¥–∞“õ–∏“õ–∞) –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥: 10, 20, 30, 60...")  
else:  
    await message.answer("‚ùå –õ—É—Ç—Ñ–∞–Ω –∞–∫—Å —Ñ–∏—Ä–∏—Å—Ç–µ–¥ —ë 'skip' –Ω–∞–≤–∏—Å–µ–¥!")

@dp.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id].get("waiting_for_ad_duration"))
async def set_advertisement_duration(message: Message):
global advertisement_end_time, advertisement_active
user_id = message.from_user.id

if not message.text.isdigit():  
    await message.answer("‚ùå –õ—É—Ç—Ñ–∞–Ω —Ä–∞“õ–∞–º–∏ –¥—É—Ä—É—Å—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥!")  
    return  
  
duration_minutes = int(message.text)  
advertisement_end_time = time.time() + (duration_minutes * 60)  # “≤–∏—Å–æ–± –∫–∞—Ä–¥–∞–Ω–∏ –≤–∞“õ—Ç–∏ –∞–Ω“∑–æ–º  
advertisement_active = True  # –§–∞—ä–æ–ª –∫–∞—Ä–¥–∞–Ω–∏ —Ä–µ–∫–ª–∞–º–∞  
await message.answer(f"‚úÖ –†–µ–∫–ª–∞–º–∞ –±–∞—Ä–æ–∏ {message.text} –¥–∞“õ–∏“õ–∞ —Ñ–∞—ä–æ–ª —Ö–æ“≥–∞–¥ –±—É–¥!")  
  
# Clear user state  
user_states.pop(user_id, None)

@dp.callback_query(lambda callback: callback.data == "check_subscription")
async def verify_subscription(callback):
if await check_subscription(callback.from_user.id):
await callback.message.edit_text("‚úÖ –û–±—É–Ω–∞–∏ —à—É–º–æ —Ç–∞—Å–¥–∏“õ —à—É–¥! “≤–æ–ª–æ –º–µ—Ç–∞–≤–æ–Ω–µ–¥ —Ñ–∞–π–ª“≥–æ—Ä–æ –∑–µ—Ä–∫–∞—à”£ –∫—É–Ω–µ–¥.")
else:
await callback.message.edit_text("‚ùå –®—É–º–æ “≥–∞–Ω”Ø–∑ –æ–±—É–Ω–∞ –Ω–∞—à—É–¥–∞–µ–¥. –õ—É—Ç—Ñ–∞–Ω –∞–≤–≤–∞–ª –æ–±—É–Ω–∞ —à–∞–≤–µ–¥ –≤–∞ –ø–∞—Å —Ç—É–≥–º–∞–∏ '‚úÖ –ú–∞–Ω –æ–±—É–Ω–∞ —à—É–¥–∞–º'-—Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥.")
await callback.answer()

–¢—É–≥–º–∞“≥–æ –±–∞—Ä–æ–∏ –∏–¥–æ—Ä–∞–∫—É–Ω–∏–∏ –∫–∞–Ω–∞–ª“≥–æ

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

def get_channel_management_keyboard():
return InlineKeyboardMarkup(inline_keyboard=[
[InlineKeyboardButton(text="‚ûï –ò–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ –∫–∞–Ω–∞–ª", callback_data="add_channel")],
[InlineKeyboardButton(text="üóë “≤–∞–∑—Ñ –∫–∞—Ä–¥–∞–Ω–∏ –∫–∞–Ω–∞–ª", callback_data="remove_channel")],
[InlineKeyboardButton(text="üìã –†”Ø–π—Ö–∞—Ç–∏ –∫–∞–Ω–∞–ª“≥–æ", callback_data="list_channels")]
])

@dp.message(lambda message: message.text == "üì∫ –ö–∞–Ω–∞–ª“≥–æ")
async def manage_channels(message: Message):
if message.from_user.id == ADMIN_ID:
await message.answer(
"üì∫ –ò–¥–æ—Ä–∞–∫—É–Ω–∏–∏ –∫–∞–Ω–∞–ª“≥–æ\n\n"
"–ò–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥ –∞–º–∞–ª–µ, –∫–∏ –º–µ—Ö–æ“≥–µ–¥ –∏“∑—Ä–æ –∫—É–Ω–µ–¥:",
reply_markup=get_channel_management_keyboard(),
parse_mode="Markdown"
)
else:
await message.answer("üö´ –ò–Ω —Ñ—É–Ω–∫—Å–∏—è —Ç–∞–Ω“≥–æ –±–∞—Ä–æ–∏ –∞–¥–º–∏–Ω –∞—Å—Ç!")

@dp.callback_query(lambda callback: callback.data == "add_channel")
async def add_channel_callback(callback):
if callback.from_user.id == ADMIN_ID:
user_states[callback.from_user.id] = {"waiting_for_channel": True}
await callback.message.edit_text(
"üîó –ò–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ –∫–∞–Ω–∞–ª–∏ –Ω–∞–≤\n\n"
"–õ—É—Ç—Ñ–∞–Ω username-–∏ –∫–∞–Ω–∞–ª—Ä–æ –±–æ @ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (–º–∞—Å–∞–ª–∞–Ω: @example_channel):"
)
await callback.answer()

@dp.callback_query(lambda callback: callback.data == "remove_channel")
async def remove_channel_callback(callback):
if callback.from_user.id == ADMIN_ID:
if CHANNELS:
channels_buttons = []
for channel in CHANNELS.keys():
channels_buttons.append([InlineKeyboardButton(
text=f"üóë {channel}",
callback_data=f"delete_{channel}"
)])
channels_buttons.append([InlineKeyboardButton(text="üîô –ë–æ–∑–≥–∞—à—Ç", callback_data="back_to_channels")])

keyboard = InlineKeyboardMarkup(inline_keyboard=channels_buttons)  
        await callback.message.edit_text(  
            "üóë **“≤–∞–∑—Ñ –∫–∞—Ä–¥–∞–Ω–∏ –∫–∞–Ω–∞–ª**\n\n"  
            "–ö–∞–Ω–∞–ª–µ—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥, –∫–∏ –º–µ—Ö–æ“≥–µ–¥ “≥–∞–∑—Ñ –∫—É–Ω–µ–¥:",  
            reply_markup=keyboard  
        )  
    else:  
        await callback.message.edit_text(  
            "‚ùå **“≤–µ“∑ –∫–∞–Ω–∞–ª–µ –±–∞—Ä–æ–∏ “≥–∞–∑—Ñ –º–∞–≤“∑—É–¥ –Ω–µ—Å—Ç!**",  
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[  
                [InlineKeyboardButton(text="üîô –ë–æ–∑–≥–∞—à—Ç", callback_data="back_to_channels")]  
            ])  
        )  
await callback.answer()

@dp.callback_query(lambda callback: callback.data == "list_channels")
async def list_channels_callback(callback):
if callback.from_user.id == ADMIN_ID:
if CHANNELS:
channels_list = "\n".join([
f"üì∫ {channel} (—Ç–æ {time.strftime('%Y-%m-%d %H:%M', time.localtime(exp))})"
for channel, exp in CHANNELS.items()
])
await callback.message.edit_text(
f"üìã –ö–∞–Ω–∞–ª“≥–æ–∏ —Ñ–∞—ä–æ–ª:\n\n{channels_list}",
reply_markup=InlineKeyboardMarkup(inline_keyboard=[
[InlineKeyboardButton(text="üîô –ë–æ–∑–≥–∞—à—Ç", callback_data="back_to_channels")]
])
)
else:
await callback.message.edit_text(
"üìã –†”Ø–π—Ö–∞—Ç–∏ –∫–∞–Ω–∞–ª“≥–æ\n\n"
"“≤–∞–Ω”Ø–∑ –∫–∞–Ω–∞–ª–µ –∏–ª–æ–≤–∞ –Ω–∞—à—É–¥–∞–∞—Å—Ç.",
reply_markup=InlineKeyboardMarkup(inline_keyboard=[
[InlineKeyboardButton(text="üîô –ë–æ–∑–≥–∞—à—Ç", callback_data="back_to_channels")]
])
)
await callback.answer()

@dp.callback_query(lambda callback: callback.data.startswith("delete_"))
async def delete_channel_callback(callback):
if callback.from_user.id == ADMIN_ID:
channel_to_delete = callback.data.replace("delete_", "")
if channel_to_delete in CHANNELS:
del CHANNELS[channel_to_delete]
del channel_expiration[channel_to_delete]
await callback.message.edit_text(
f"‚úÖ –ö–∞–Ω–∞–ª–∏ {channel_to_delete} –±–æ –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç “≥–∞–∑—Ñ —à—É–¥!",
reply_markup=InlineKeyboardMarkup(inline_keyboard=[
[InlineKeyboardButton(text="üîô –ë–æ–∑–≥–∞—à—Ç", callback_data="back_to_channels")]
])
)
else:
await callback.message.edit_text(
"‚ùå –ö–∞–Ω–∞–ª —ë—Ñ—Ç –Ω–∞—à—É–¥!",
reply_markup=InlineKeyboardMarkup(inline_keyboard=[
[InlineKeyboardButton(text="üîô –ë–æ–∑–≥–∞—à—Ç", callback_data="back_to_channels")]
])
)
await callback.answer()

@dp.callback_query(lambda callback: callback.data == "back_to_channels")
async def back_to_channels_callback(callback):
if callback.from_user.id == ADMIN_ID:
await callback.message.edit_text(
"üì∫ –ò–¥–æ—Ä–∞–∫—É–Ω–∏–∏ –∫–∞–Ω–∞–ª“≥–æ\n\n"
"–ò–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥ –∞–º–∞–ª–µ, –∫–∏ –º–µ—Ö–æ“≥–µ–¥ –∏“∑—Ä–æ –∫—É–Ω–µ–¥:",
reply_markup=get_channel_management_keyboard()
)
await callback.answer()

@dp.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id].get("waiting_for_channel"))
async def add_channel(message: Message):
user_id = message.from_user.id
channel_username = message.text.strip()

if not channel_username.startswith("@"):  
    await message.answer("‚ùå –õ—É—Ç—Ñ–∞–Ω username-–∏ –∫–∞–Ω–∞–ª—Ä–æ –±–æ @ –æ“ì–æ–∑ –∫—É–Ω–µ–¥ (–º–∞—Å–∞–ª–∞–Ω: @example_channel)")  
    return  
  
# –°–∞–Ω“∑–∏—à–∏ –∫–∞–Ω–∞–ª–∏ –º–∞–≤“∑—É–¥–±—É–¥–∞  
if channel_username in CHANNELS:  
    await message.answer(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª–∏ {channel_username} –∞–ª–ª–∞–∫–∞–π –º–∞–≤“∑—É–¥ –∞—Å—Ç!")  
    user_states.pop(user_id, None)  
    return  
  
user_states[user_id] = {"waiting_for_channel_duration": True, "channel": channel_username}  
await message.answer("‚è≥ –õ—É—Ç—Ñ–∞–Ω –º”Ø“≥–ª–∞—Ç–∏ —Ñ–∞—ä–æ–ª–∏—è—Ç–∏ –∫–∞–Ω–∞–ª—Ä–æ (—Å–æ–∞—Ç) –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥: 12, 24, 48, 72...")

@dp.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id].get("waiting_for_channel_duration"))
async def set_channel_duration(message: Message):
global CHANNELS, channel_expiration
user_id = message.from_user.id

if not message.text.isdigit():  
    await message.answer("‚ùå –õ—É—Ç—Ñ–∞–Ω —Ä–∞“õ–∞–º–∏ –¥—É—Ä—É—Å—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥!")  
    return  
  
duration_hours = int(message.text)  
channel = user_states[user_id]["channel"]  
expiration_time = time.time() + (duration_hours * 3600)  # “≤–∏—Å–æ–± –∫–∞—Ä–¥–∞–Ω–∏ –≤–∞“õ—Ç–∏ –∞–Ω“∑–æ–º –¥–∞—Ä —Å–æ–∞—Ç  
  
# –°–∞–Ω“∑–∏—à–∏ –º–∞–≤“∑—É–¥–±—É–¥–∞–Ω–∏ –∫–∞–Ω–∞–ª –ø–µ—à –∞–∑ –∏–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω  
try:  
    # –û–∑–º–æ–∏—à–∏ –¥–∞—Å—Ç—Ä–∞—Å–∏–∏ –∫–∞–Ω–∞–ª  
    chat_info = await bot.get_chat(channel)  
      
    CHANNELS[channel] = expiration_time  
    channel_expiration[channel] = expiration_time  
      
    await message.answer(f"‚úÖ –ö–∞–Ω–∞–ª–∏ {channel} –±–∞—Ä–æ–∏ {duration_hours} —Å–æ–∞—Ç –∏–ª–æ–≤–∞ —à—É–¥!")  
except Exception as e:  
    await message.answer(f"‚ùå –•–∞—Ç–æ–≥”£: –ö–∞–Ω–∞–ª–∏ {channel} —ë—Ñ—Ç –Ω–∞—à—É–¥ —ë –±–æ—Ç –±–∞ –æ–Ω –¥–∞—Å—Ç—Ä–∞—Å”£ –Ω–∞–¥–æ—Ä–∞–¥!")  
  
# Clear user state  
user_states.pop(user_id, None)

async def main():
load_files() # Load files on startup
await dp.start_polling(bot)

if name == "main":
asyncio.run(main())

